Python Operators:
-----------------

	*Operators are particular symbols which operate on some values and produce an output.

The values are known as Operands.

Example:

	>>> a=5
	>>> b=4
	>>> print (a+b)
	9


Note:

1.Here 4 and 5 are Operands 

2. (+) , (=) signs are the operators. They produce the output 9

3.a and b are data varibles

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Python supports the following operators:

	1.Arithmetic Operators.

	2.Relational Operators.

	3.Assignment Operators.

	4.Logical Operators.

	5.Membership Operators.

	6.Identity Operators.

	7.Bitwise Operators.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
1.Arithmetic Operators:

	Operators	Description
	
	+		To perform addition

	-		To perform subtraction

	*		To perform multiplication

	/		To perform division
  
	%		To return remainder after division(Modulus)

	**		Perform exponent(raise to power)

	//		Perform Floor division(gives integer value after division)



Example:1
        #Addition Operation
	>>> a=5
	>>> b=3
	>>> print(a+b)
	8


Example:2
	#Subtraction operation
	>>> a=5
	>>> b=3
	>>> print(a-b)
	2

Example:3
	#Multiplication operation
	>>> a=5
	>>> b=3
	>>> print(a*b)
	15

Example:4
	#Division Operation it's retains Quotient value
	>>> a=5
	>>> b=3
	>>> print(a/b)
	1.6666666666666667

Example:5
	#Division Operation it's retains Remainder value
	>>> a=5
	>>> b=3
	>>> print(a%b)
	2

Example:6
	#Perform exponent(raise to power)
	>>> 2**3
	8

Example:7
	#Perform Floor division it gives integer value after division
	>>> 5//3
	3
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Relational Operators:
-----------------------

	Operators	Description

	<		Less than

	>		Greater than

	<=		Less than or equal to

	>=		Greater than or equal to

	==		Equal to

	!=		Not equal to

	<>		Not equal to(similar to !=)     

*Note:<> operator now not available

Example:1
	#Less than
	>>> a=5
	>>> b=3
	>>> print(a>b)
	True

Example:2
	#Greater than
	>>> a=5
	>>> b=3
	>>> print(a<b)
	False

Example:3
	#Less than or equal to
	>>> a=5
	>>> b=5
	>>> print(a>=b)
	True

Example:4
	#Greater than or Equal to
	>>> a=5
	>>> b=5
	>>> print(a<=b)
	True

Example:5
	#Perfectly equal to
	>>> a=5
	>>> b=5
	>>> print(a==b)
	True


Example:5
	>>> a=5
	>>> b=4
	>>> print(a==b)
	True

Example:6
	#Not Equal to
	>>> a=5
	>>> b=4
	>>> print(a!=b)
	True

Example:6
	#Not equal to(similar to !=)
	>>> a=5
	>>> b=4
	>>> print(a<>b)
	True
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Assignment Operators:
-----------------------

	Operators	Description

	=		Assignment

	+=		Add and assign

	-=		Subtract and Assign

	*=		Multiply and assign

	/=		Divide and Assign

	%=		Modulus and assign

	**=		Exponent and assign

	//=		Floor division and assign

Example:1
	#Assignment Operator
	>>> a=5
	>>> print(a)
	5

Example:2
	#Add and assign operator
	>>> a=5
	>>> a+=10
	>>> print(a)
	15

Example:3
	#Subtract and assign operator
	>>> a=10
	>>> a-=5
	>>> print(a)
	5

Example:4
	#Multiply and assign operator
	>>> a=10
	>>> a*=10
	>>> print(a)
	100

Example:5
	#Divide and assign operator
	>>> a=10
	>>> a/=3
	>>> print(a)
	3.3333333333333335

Example:6
	#Modulus and assign operator
	>>> a=10
	>>> a%=3
	>>> print(a)
	1

Example:7
	#Exponent and assign operator
	>>> a=2
	>>> a**=3
	>>> print(a)
	8

Example:8
	#Floor division and assign operator
	>>> a=10
	>>> a//=3
	>>> print(a)
	3
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Logical Operators:

	Operators	Description

	and		Logical AND(When both conditions are true output will be true)

	or		Logical OR (If any one condition is true output will be true)

	not		Logical NOT(Compliment the condition i.e., reverse)

Example:1

	>>> a=5
	>>> b=4
	>>> c=3
	>>> print(a>b and a>c)
	True

Example:2

	>>> a=5
	>>> b=5
	>>> c=3
	>>> print(a>b and a>c)
	True

Example:3

	>>> a=5
	>>> b=6
	>>> print(not(a>b))
	True
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.Membership Operators:

	Operators	Description

	in		Returns true if a variable is in sequence of another variable, else false.

	not in		Returns true if a variable is not in sequence of another variable, else false.


Example:1

	>>>a=10  
 
	>>>list=[10,20,30,40,50];

	>>>if (a in list):                 
    	           print ("a is in given list")
                 
	>>>else: 
		  
    	     	   print ("a is not in given list")
		 

	a is in given list
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.Identity Operators:

	Operators	Description

	is		Returns true if identity of two operands are same, else false

	is not		Returns true if identity of two operands are not same, else false.

Example:1
---------
>>> 10 is 10
True

Example:2
---------
	a=20
	b=20
	if(a is b):
    	     print("a & b have same identity")

	else:
    	     print("a & b are different")

	a & b have same identity

Example:3
---------
	a=20
	b=10
	if(a is b):
    	     print("a & b have same identity")

	else:
    	     print("a & b are different")

	a & b are identity
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.Python Bitwise Operators:
---------------------------

	Operator			Description											Example

	& Binary AND			Operator copies a bit to the result if it exists in both operands				(a & b) (means 0000 1100)

	| Binary OR			It copies a bit if it exists in either operand.							(a | b) = 61 (means 0011 1101)

	^ Binary XOR			It copies the bit if it is set in one operand but not both.					(a ^ b) = 49 (means 0011 0001)

	~ Binary Ones Complement	It is unary and has the effect of 'flipping' bits.						(~a ) = -61 (means 1100 0011 in 2's complement form due to a signed binary number.

	<< Binary Left Shift		The left operands value is moved left by the number of bits specified by the right operand.	a << 2 = 240 (means 1111 0000)

	>> Binary Right Shift		The left operands value is moved right by the number of bits specified by the right operand.	a >> 2 = 15 (means 0000 1111)


Example:1
---------
a = 60            # 60 = 0011 1100 
b = 13            # 13 = 0000 1101 
c = 0

c = a & b;        # 12 = 0000 1100
print ("Line 1 - Value of c is ", c)


c = a | b;        # 61 = 0011 1101 
print ("Line 2 - Value of c is ", c)


c = a ^ b;        # 49 = 0011 0001
print ("Line 3 - Value of c is ", c


c = ~a;           # -61 = 1100 0011
print "Line 4 - Value of c is ", c


c = a << 2;       # 240 = 1111 0000
print "Line 5 - Value of c is ", c


c = a >> 2;       # 15 = 0000 1111
print "Line 6 - Value of c is ", c
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

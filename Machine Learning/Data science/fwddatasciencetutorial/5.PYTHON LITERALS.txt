Python Literals:
----------------

	*Literals can be defined as a data that is given in a variable or constant.

	*Python support the following literals:

>>>>>>>>>>>>>>>>>>I. String literals:
------------------------------------

	*String literals can be formed by enclosing a text in the quotes.

	* We can use both single as well as double quotes for a String.

Example:

	"Aman" , '12345'

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Types of Strings:
-----------------

There are two types of Strings supported in Python:

a) Single line String- Strings that are terminated within a single line are known as Single line Strings.

Example:1
---------

	>>> a="Raja"
	>>> print (a)
	Raja

--------------------------------------
Example:2
---------
	>>> a='Raja'
	>>> print (a)
	Raja
------------------------------------------------------------------------------------------------------------------
b) Multi line String- A piece of text that is spread along multiple lines is known as Multiple line String.

There are two ways to create Multiline Strings:

1). Adding black slash at the end of each line.

Example:1
---------
	>>> a='Hello\
	Python'
	>>> a
	'HelloPython'
-------------------------------------------
2).Using triple quotation marks:-

Example:2
---------
	>>> a='''welocome
	to
	class'''
	>>> print (a)
	welocome
	to
	class
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>II.Numeric literals:
---------------------------------------

Numeric Literals are immutable. Numeric literals can belong to following four different numerical types.

1.Int(signed integers)

	Numbers( can be both positive and negative) with no fractional part.
	Ex: 100

2.Long(long integers)
	Integers of unlimited size followed by lowercase or uppercase L 
	Ex: 87032845L

3.float(floating point)
	Real numbers with both integer and fractional part 
	Ex: -26.2

4.Complex(complex)
	In the form of a+bj where a forms the real part and b forms the imaginary part of complex number. 
	Ex: 3.14j
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>III. Boolean literals:
-------------------------------------------

	*A Boolean literal can have any of the two values: True(1) or False(0).

Example:1
---------
	>>> a=True
	>>> print (a)
	True

Example:2
---------
	>>> a=False
	>>> print (a)
	False
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

>>>>>>>>>>>>>>>>>>>>IV. Special literals
-------------------------------------------

	*Python contains one special literal i.e., None.

	*None is used to specify to that field that is not created. It is also used for end of lists in Python.

Example:1
---------
	>>> a=None
	>>> print (a)
	None
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>V.Literal Collections:
-------------------------------------------------

Collections such as tuples, lists and Dictionary are used in Python.

List:
-----

	1.List contain items of different data types. Lists are mutable i.e., modifiable.

	2.The values stored in List are separated by commas(,) and enclosed within a square brackets([]).
 
	3.We can store different type of data in a List.

	4.Value stored in a List can be retrieved using the slice operator([] and [:]).

	5.The plus sign (+) is the list concatenation and asterisk(*) is the repetition operator.


Example:1
	>>> list=['raja',100,25.6,'poolan']
	>>> list
	['raja', 100, 25.6, 'poolan']


Example:2
	>>> list=['raja',100,25.6,'poolan']
	>>> list[1:3]
	[100, 25.6]

Example:3

	>>> list=['raja',100,25.6,'poolan']
	>>> list1=['python',50]
	>>> list+list1
	['raja', 100, 25.6, 'poolan', 'python', 50]

Example:4

	>>> list1=['python',50]
	>>> list1*2
	['python', 50, 'python', 50]

Example:5
Using the append() method to append an item:
	>>>list=["Raja",10,20,30]
	>>>list.append("python")
	["Raja",10,20,30,"python"]

Example:6
	>>>list1=["Raja","Rani"]
	>>>list2=[10,20]
	>>>list1.extend(list2)
	>>> list1
	['Raja', 'Rani', 10, 20]

Example:7
	>>>list1=["Raja","Rani"]
	>>> list1.remove("Rani")
	>>> list1
	['Raja']

Example:8
	>>> list=['Raja',10,70]
	>>> len(list)
	3

Example:9
	>>> list=[20,10,70]
	>>> min(list)
	10
	>>> max(list)
	70

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Slice Lists/Arrays and Tuples in Python:
----------------------------------------

	*Python has an amazing feature just for that called slicing. Slicing can not only be used for lists, 
	 tuples or arrays, but custom data structures as well, with the slice object


Example:1
---------
>>> a = [1, 2, 3, 4, 5, 6, 7, 8]
>>> a[1:4]
[2, 3, 4]


Example:2
---------
>>> a = [1, 2, 3, 4, 5, 6, 7, 8]
>>> a[1:4:2]
[2, 4]


Example:3 Slicing (Lists, Tuples and Arrays) in Reverse
------------------------------------------------------
>>> a = [1, 2, 3, 4, 5, 6, 7, 8]
>>> a[::-1]
[8, 7, 6, 5, 4, 3, 2, 1]



Example:4(Slicing Python Tuples)
--------------------------------
>>> t = (2, 5, 7, 9, 10, 11, 12)
>>> t[2:4]
(7, 9)


Example:5 (Using Python Slice Objects)
--------------------------------------
>>> a = [1, 2, 3, 4, 5]
>>> sliceObj = slice(1, 3)
>>> a[sliceObj]
[2, 3]


Example:6
----------
>>> L = range(10)
>>> L[::2]
[0, 2, 4, 6, 8]


Example:7
----------
>>> s='abcd'
>>> s[::2]
'ac'
>>> s[::-1]
'dcba'


Example:8
----------
>>> a = range(3)
>>> a
[0, 1, 2]
>>> a[1:3] = [4, 5, 6]
>>> a
[0, 4, 5, 6]



Example:9
----------
>>> a = range(4)
>>> a
[0, 1, 2, 3]
>>> a[::2]
[0, 2]



Example:10
----------
>>> range(10)[slice(0, 5, 2)]
[0, 2, 4]
>>> del a[::2]
>>> a
[1, 3]
---------------------------------------------------------------------------------------------------------------

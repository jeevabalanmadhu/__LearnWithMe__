Python Pandas - Series:
-----------------------

	1.Series is a one-dimensional labeled array capable of holding data of any type 

	  (integer, string, float, python objects, etc.). 

	2.The axis labels are collectively called index.


A pandas Series can be created using the following constructor:

	pandas.Series( data, index, dtype, copy)

The parameters of the constructor are as follows:
------------------------------------------------

S.No	Parameter & Description
--------------------------------------------------------------------------
1	data
	data takes various forms like ndarray,tuple, list, Dictionary,constants

2	index
	Index values must be unique and hashable, same length as data. 
	Default np.arrange(n) if no index is passed.

3	dtype
	dtype is for data type. If None, data type will be inferred

4	copy
	Copy data. Default False
---------------------------------------------------------------------------------------------------------------
A series can be created using various inputs like:
--------------------------------------------------
	1.Array

	2.Dict

	3.Scalar value or constant
	
	4.List or Tuple
---------------------------------------------------------------------------------------------------------------
1.Create an Empty Series:
--------------------------

	*A basic series, which can be created is an Empty Series.

Example:
--------
#import the pandas library and aliasing as pd
import pandas as pd
s = pd.Series()
print(s)

output:
-------
Series([], dtype: float64)
---------------------------------------------------------------------------------------------------------------
2.Create a Series from ndarray:
-------------------------------
	
	*If data is an ndarray, then index passed must be of the same length. 

	*If no index is passed, then by default index will be range(n) where n is array length,
         i.e., [0,1,2,3…. range(len(array))-1].

Example:1
---------
#import the pandas library and aliasing as pd
#import the numpy library and aliasing as np
import pandas as pd
import numpy as np

data=np.array(['r','a','j','a'])
result=pd.Series(data)
print(result)

output:
-------
0    r
1    a
2    j
3    a
dtype: object

Note:
-----
	*We did not pass any index, so by default, it assigned the indexes ranging 
	 from 0 to len(data)-1, i.e., 0 to 3.



Example:2
---------
#import the pandas library and aliasing as pd
#import the numpy library and aliasing as np
import pandas as pd
import numpy as np
data = np.array(['r','a','j','a'])
result = pd.Series(data,index=[100,101,102,103])
print(result)

output:
-------
100    r
101    a
102    j
103    a
dtype: object

Note:
-----
	*We passed the index values here. 

	*Now we can see the customized indexed values in the output.
------------------------------------------------------------------------------------------------------------------
Create a Series from dict:
--------------------------

	*A dict can be passed as input and if no index is specified, then the dictionary keys are taken in a 
	 sorted order to construct index. 

	*If index is passed, the values in data corresponding to the labels in the index will be pulled out.


Example:1
---------
#import the pandas library and aliasing as pd
import pandas as pd

data={"Name":"Raja","Age":30,"ID":"PPV01"}
result=pd.Series(data)
print(result)

output:
-------
Name     Raja
Age        30
ID      PPV01
dtype: object

Note:
-----
	*Observe - Dictionary keys are used to construct index.


Example:2
---------
#import the pandas library and aliasing as pd
#import the numpy library and aliasing as np
import pandas as pd
import numpy as np

data={"Name":"Raja","Age":30,"ID":"PPV01"}
result=pd.Series(data,index=['ID','Name','Age'])
print(result)

output:
-------
ID      PPV01
Name     Raja
Age        30
dtype: object

Note:
-----
	*Index order is persisted and the missing element is filled with NaN (Not a Number).
---------------------------------------------------------------------------------------------------------------
Create a Series from Scalar:
----------------------------

	*If data is a scalar value, an index must be provided. 

	*The value will be repeated to match the length of index

Example:
--------

#import the pandas library and aliasing as pd
import pandas as pd
import numpy as np
s = pd.Series(5, index=[0, 1, 2, 3])
print(s)


output:
-------
0  5
1  5
2  5
3  5
dtype: int64
---------------------------------------------------------------------------------------------------------------
Accessing Data from Series with Position:
------------------------------------------

	*Accessing Data from Series with Position

	*Data in the series can be accessed similar to that in an ndarray.

Example:1
---------
	*Retrieve the first element. As we already know, the counting starts from zero for the array, 

	*which means the first element is stored at zeroth position and so on.


Coding:
-------
import pandas as pd
s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

#retrieve the first element
print(s[0])

output:
-------
1


Example:2
----------
import pandas as pd
s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

#retrieve the first three element
print s[:3]

output:
-------
a  1
b  2
c  3
dtype: int64
-------------------------------------------------------------
Example 3:
----------
	Retrieve the last three elements.

Coding:
-------
import pandas as pd
s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

#retrieve the last three element
print s[-3:]

output:
-------
c  3
d  4
e  5
dtype: int64
---------------------------------------------------------------------------------------------------------------
Retrieve Data Using Label (Index):
----------------------------------


*Retrieve a single element using index label value.

Example:1
---------
import pandas as pd
s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

#retrieve a single element
print s['a']

output:
-------
1


Example:2
---------

Retrieve multiple elements using a list of index label values.

import pandas as pd
s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

#retrieve multiple elements
print (s[['a','c','d']])

output:
-------
a  1
c  3
d  4
dtype: int64


Example:3
---------

If a label is not contained, an exception is raised.

import pandas as pd
s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

#retrieve multiple elements
print s['f']

output:
-------
…
KeyError: 'f'
------------------------------------------------------------------------------------------------------------------




Python Pandas - Sorting:
------------------------

	*There are two kinds of sorting available in Pandas. 

They are 

	1.By label
	
	2.By Actual Value


Example:1
=========
import pandas as pd
import numpy as np

unsorted_df=pd.DataFrame(np.random.randn(10,2),index=[1,4,6,2,3,5,9,8,0,7],columns=['col2','col1'])
print(unsorted_df)

output:
=======
        col2       col1
1  -2.063177   0.537527
4   0.142932  -0.684884
6   0.012667  -0.389340
2  -0.548797   1.848743
3  -1.044160   0.837381
5   0.385605   1.300185
9   1.031425  -1.002967
8  -0.407374  -0.435142
0   2.237453  -1.067139
7  -1.445831  -1.701035
---------------------------------------------------------------------------------------------------------------
By Label
--------

	*Using the sort_index() method, by passing the axis arguments and the order of sorting, DataFrame 
	 can be sorted.

	*By default, sorting is done on row labels in ascending order.


Example:1
=========
import pandas as pd
import numpy as np

unsorted_df = pd.DataFrame(np.random.randn(10,2),index=[1,4,6,2,3,5,9,8,0,7],columns = ['col2','col1'])

sorted_df=unsorted_df.sort_index()
print(sorted_df)

output:
=======
        col2       col1
0   0.208464   0.627037
1   0.641004   0.331352
2  -0.038067  -0.464730
3  -0.638456  -0.021466
4   0.014646  -0.737438
5  -0.290761  -1.669827
6  -0.797303  -0.018737
7   0.525753   1.628921
8  -0.567031   0.775951
9   0.060724  -0.322425
------------------------------------------------------------------------------------------------------------------
Order of Sorting
----------------
	*By passing the Boolean value to ascending parameter, the order of the sorting can be controlled. 

	*Let us consider the following example to understand the same.

Example:1
=========
import pandas as pd
import numpy as np

unsorted_df = pd.DataFrame(np.random.randn(10,2),index=[1,4,6,2,3,5,9,8,0,7],columns = ['col2','col1'])

sorted_df = unsorted_df.sort_index(ascending=False)
print(sorted_df)

output:
=======
         col2        col1
9    0.825697    0.374463
8   -1.699509    0.510373
7   -0.581378    0.622958
6   -0.202951    0.954300
5   -1.289321   -1.551250
4    1.302561    0.851385
3   -0.157915   -0.388659
2   -1.222295    0.166609
1    0.584890   -0.291048
0    0.668444   -0.061294
---------------------------------------------------------------------------------------------------------------
Sort the Columns:
-----------------

	*By passing the axis argument with a value 0 or 1, the sorting can be done on the column labels. 

	*By default, axis=0, sort by row. Let us consider the following example to understand the same.


Example:1
=========
import pandas as pd
import numpy as np
 
unsorted_df = pd.DataFrame(np.random.randn(10,2),index=[1,4,6,2,3,5,9,8,0,7],columns = ['col2','col1'])
print(unsorted_df)
print("After Sorted")
sorted_df=unsorted_df.sort_index(axis=1)
print(sorted_df)


output:
=======
         col1        col2
1   -0.291048    0.584890
4    0.851385    1.302561
6    0.954300   -0.202951
2    0.166609   -1.222295
3   -0.388659   -0.157915
5   -1.551250   -1.289321
9    0.374463    0.825697
8    0.510373   -1.699509
0   -0.061294    0.668444
7    0.622958   -0.581378
---------------------------------------------------------------------------------------------------------------
By Value:
---------
	*Like index sorting, sort_values() is the method for sorting by values. 

	*It accepts a 'by' argument which will use the column name of the DataFrame with which the values are to 
	 be sorted.

Example:1
=========
import pandas as pd
import numpy as np

unsorted_df = pd.DataFrame({'col1':[2,1,1,1],'col2':[1,3,2,4]})
print("Before Sort")
print(unsorted_df)

print("After Sort")
sorted_df = unsorted_df.sort_values(by='col1')
print(sorted_df)

output:
=======
Before Sort
   col1  col2
0     2     1
1     1     3
2     1     2
3     1     4
After Sort
   col1  col2
1     1     3
2     1     2
3     1     4
0     2     1
0     2    1


Example:2
=========
import pandas as pd
import numpy as np

unsorted_df = pd.DataFrame({'col1':[2,1,1,1],'col2':[1,3,2,4]})
print("Before Sort")
print(unsorted_df)

print("After Sort")
sorted_df = unsorted_df.sort_values(by='col2',ascending=False)
print(sorted_df)


output:
=======
Before Sort
   col1  col2
0     2     1
1     1     3
2     1     2
3     1     4
After Sort
   col1  col2
3     1     4
1     1     3
2     1     2
0     2     1

Example:3
=========
import pandas as pd
import numpy as np

unsorted_df = pd.DataFrame({'col1':[2,1,1,1],'col2':[1,3,2,4]})
   sorted_df = unsorted_df.sort_values(by=['col1','col2'])

print(sorted_df)

output:
=======
  col1 col2
2   1   2
1   1   3
3   1   4
0   2   1
---------------------------------------------------------------------------------------------------------------------------------------
Real-Time
---------
import pandas as pd

unsorted_df=pd.read_excel("F:/R/DATA/RSpreadSheet.xlsx")
print(unsorted_df) 

x=unsorted_df.rename(index={1:15,3:16,5:1})

sorted_df=x.sort_values(by="Age",ascending=False)
print(sorted_df)
   
sorted_df.to_excel("F:/SortedExcel.xlsx",sheet_name="Raja",index=False,startcol=1,startrow=1)   
-------------------------------------------------------------------------------------------------------------------------------------  
import numpy as np
df = pd.DataFrame({
                   'col1' : ['A', 'A', 'B', np.nan, 'D', 'C'],
                   'col2' : [2, 1, 9, 8, 7, 4],
                   'col3': [0, 1, 9, 4, 2, 3],
                  })

print(df)
df.sort_values(by='col1', ascending=True, na_position='last')
---------------------------------------------------------------------------------------------------------------
